version: '3.9'

x-logging: &logging
  logging:
    driver: syslog
    options:
      syslog-address: tcp://127.0.0.1:514
      syslog-format: rfc3164
      tag: '{{.Name}}'

x-dns: &dns
  dns:
    - 1.1.1.1
    - 8.8.8.8
    - 9.9.9.9
    - 8.8.4.4

x-app-env: &app-env
  TZ: UTC
  DOMAIN_NAME: ${DOMAIN_NAME?}
  DATA_DIR_ROOT: /data
  NODE_ENV: ${NODE_ENV?} #See https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md
  # DEBUG: '*' # Useful for debuggind Express.js routing
  SMTP_CONNECTION_STRING: ${SMTP_CONNECTION_STRING?}

services:
  smtp-out:
    depends_on: [logger]
    container_name: smtp-out
    hostname: feedsubscription.com
    image: smtp-out
    restart: always
    ports: ['127.0.0.1:1587:587']
    volumes:
      - ./.tmp/opendkim-keys:/etc/opendkim/keys
      - ${POSTFIX_DIR_ROOT?}:/var/spool/postfix # to persist queue during container restarts
    environment:
      TZ: UTC
      ALLOWED_SENDER_DOMAINS: feedsubscription.com
      POSTFIX_notify_classes: 'bounce,resource,software'
      POSTFIX_2bounce_notice_recipient: postmaster@feedsubscription.com
      POSTFIX_delay_notice_recipient: postmaster@feedsubscription.com
      POSTFIX_error_notice_recipient: postmaster@feedsubscription.com

      POSTFIX_message_size_limit: 10485760 # 10M

      POSTFIX_virtual_alias_domains: feedsubscription.com
      POSTFIX_virtual_alias_maps: 'texthash:/etc/postfix/virtual'

      POSTFIX_transport_maps: 'texthash:/etc/postfix/transport'
      # fragile destinations
      POSTFIX_fragile_destination_concurrency_limit: 1
      POSTFIX_fragile_destination_rate_delay: 2s

    <<: [*logging, *dns]
    healthcheck:
      disable: true # Disabled because makes it makes following the logs harder when degugging

  smtp-in:
    depends_on: [logger]
    container_name: smtp-in
    hostname: smtp-in
    image: smtp-in
    ports: ['25:25']
    restart: always
    volumes:
      - ./.tmp/smtp-in/opendkim-keys:/var/db/dkim/
      - ./.tmp/certbot/conf/live/feedsubscription.com/fullchain.pem:/etc/postfix/cert/smtp.cert:ro
      - ./.tmp/certbot/conf/live/feedsubscription.com/privkey.pem:/etc/postfix/cert/smtp.key:ro
    environment:
      SMF_DOMAIN: feedsubscription.com
      SMF_CONFIG: '@feedsubscription.com:gurdiga@gmail.com'
      SMF_SRS: 'true'
      SMF_POSTFIXMAIN_sender_canonical_maps: 'tcp:localhost:10001'
      SMF_POSTFIXMAIN_sender_canonical_classes: 'envelope_sender'
      SMF_POSTFIXMAIN_recipient_canonical_maps: 'tcp:localhost:10002'
      SMF_POSTFIXMAIN_recipient_canonical_classes: 'envelope_recipient,header_recipient'

      # TLS: No ECDSA certificate in this setup, only RSA
      SMF_POSTFIXMAIN_smtpd_tls_eccert_file: ''
      SMF_POSTFIXMAIN_smtpd_tls_eckey_file: ''
    <<: [*logging, *dns]

  app:
    depends_on: [logger]
    container_name: app
    hostname: app
    image: app
    init: true # This is to tell Node process to stop when the container is asked to stop.
    restart: always
    volumes:
      - ${DATA_DIR_ROOT?}:/data
    # NOTE: This doesn’t work, and I’m not fixing it now because I don’t
    # know how, and it’s not worth the effort of further investigation.
    # extra_hosts:
    #   - 'feedsubscription.com:207.154.253.211'
    environment:
      <<: *app-env
    command: node dist/app/cron.js
    <<: [*logging, *dns]

  delmon:
    depends_on: [logger]
    container_name: delmon
    hostname: delmon
    image: delmon
    init: true # This is to tell Node process to stop when the container is asked to stop.
    restart: always
    volumes:
      - .tmp/logs/feedsubscription/smtp-out.log:/smtp-out.log:ro
      - ${DATA_DIR_ROOT?}:/data
    environment:
      <<: *app-env
    <<: [*logging, *dns]

  api:
    depends_on: [logger]
    container_name: api
    hostname: api
    image: app
    init: true # This is to tell Node process to stop when the container is asked to stop.
    restart: always
    ports: ['127.0.0.1:3000:3000']
    command: node dist/api/server.js
    volumes:
      - ${DATA_DIR_ROOT?}:/data
    environment:
      # DEBUG: 'express:*'
      # TS_NODE_DEBUG: 'true'
      <<: *app-env
    <<: [*logging, *dns]

  # Thanks to https://github.com/wmnnd/nginx-certbot
  website:
    depends_on: [api]
    container_name: website
    hostname: website
    image: nginx:1.23.4-alpine
    restart: always
    ports: ['80:80', '443:443']
    volumes:
      - ./website/html:/usr/share/nginx/html:ro
      - ./website/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./.tmp/certbot/conf:/etc/letsencrypt
      - ./.tmp/certbot/www:/var/www/certbot
    environment:
      NGINX_HOST: feedsubscription.com
    <<: [*logging, *dns]

  # Thanks to https://github.com/wmnnd/nginx-certbot
  certbot:
    depends_on: [logger]
    container_name: certbot
    hostname: certbot
    image: certbot/certbot:v2.5.0
    restart: always
    volumes:
      - ./.tmp/certbot/conf:/etc/letsencrypt
      - ./website/html:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do date; certbot renew; sleep 7d & wait $${!}; done;'"
    <<: [*logging, *dns]

  logger:
    container_name: logger
    hostname: logger
    image: logger
    restart: always
    ports: ['127.0.0.1:514:514']
    volumes:
      - ./.tmp/logs:/var/log/syslog-ng
