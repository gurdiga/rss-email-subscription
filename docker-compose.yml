version: '3.9'

x-logging: &logging
  depends_on: [logger]
  logging:
    driver: syslog
    options:
      syslog-address: tcp://127.0.0.1:514
      syslog-format: rfc3164
      tag: '{{.Name}}'

x-app-env: &app-env
  TZ: UTC
  NODE_ENV: production #See https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md
  DATA_DIR_ROOT: /data

services:
  smtp-out:
    container_name: smtp-out
    hostname: smtp-out.feedsubscription.com
    image: boky/postfix
    restart: always
    ports: ['127.0.0.1:1587:587']
    volumes:
      - ./.tmp/opendkim-keys:/etc/opendkim/keys
      - ./.tmp/var/spool/postfix:/var/spool/postfix # to persist queue during container restarts
    environment:
      TZ: UTC
      ALLOWED_SENDER_DOMAINS: feedsubscription.com
      POSTFIX_notify_classes: 'bounce,resource,software'
      POSTFIX_bounce_notice_recipient: gurdiga@gmail.com
      POSTFIX_2bounce_notice_recipient: gurdiga@gmail.com
      POSTFIX_resource_notice_recipient: gurdiga@gmail.com
      POSTFIX_software_notice_recipient: gurdiga@gmail.com
      POSTFIX_delay_notice_recipient: gurdiga@gmail.com
      POSTFIX_error_notice_recipient: gurdiga@gmail.com

      # https://wiki.deimos.fr/Postfix:_limit_outgoing_mail_throttling
      POSTFIX_smtp_destination_concurrency_limit: 1
      POSTFIX_smtp_destination_rate_delay: 2s
    <<: *logging
    healthcheck:
      disable: true # Disabled because makes it makes following the logs harder when degugging

  smtp-in:
    container_name: smtp-in
    hostname: smtp-in
    image: zixia/simple-mail-forwarder
    ports: ['25:25']
    restart: always
    volumes:
      - ./.tmp/smtp-in/opendkim-keys:/var/db/dkim/
    environment:
      SMF_DOMAIN: feedsubscription.com
      SMF_CONFIG: '@feedsubscription.com:gurdiga@gmail.com'
      SMF_SRS: 'true'
      SMF_POSTFIXMAIN_sender_canonical_maps: 'tcp:localhost:10001'
      SMF_POSTFIXMAIN_sender_canonical_classes: 'envelope_sender'
      SMF_POSTFIXMAIN_recipient_canonical_maps: 'tcp:localhost:10002'
      SMF_POSTFIXMAIN_recipient_canonical_classes: 'envelope_recipient,header_recipient'
    <<: *logging

  app:
    container_name: app
    hostname: app
    image: app
    init: true # This is to tell Node process to stop when the container is asked to stop.
    volumes:
      - .tmp/docker-data:/data
    environment:
      SMTP_CONNECTION_STRING: smtp://smtp-out:587
      <<: *app-env
    command: node_modules/.bin/ts-node src/cron.ts
    <<: *logging

  subscription:
    container_name: subscription
    hostname: subscription
    image: app
    init: true # This is to tell Node process to stop when the container is asked to stop.
    ports: ['127.0.0.1:3000:3000']
    command: node_modules/.bin/ts-node src/subscription/server.ts
    volumes:
      - .tmp/docker-data:/data
    environment:
      <<: *app-env
    <<: *logging

  # Thanks to https://github.com/wmnnd/nginx-certbot
  website:
    container_name: website
    hostname: website
    image: nginx:alpine
    restart: always
    ports: ['80:80', '443:443']
    volumes:
      - ./website/html:/usr/share/nginx/html:ro
      - ./website/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./.tmp/certbot/conf:/etc/letsencrypt
      - ./.tmp/certbot/www:/var/www/certbot
    environment:
      NGINX_HOST: feedsubscription.com
    <<: *logging

  # Thanks to https://github.com/wmnnd/nginx-certbot
  certbot:
    container_name: certbot
    hostname: certbot
    image: certbot/certbot
    restart: always
    volumes:
      - ./.tmp/certbot/conf:/etc/letsencrypt
      - ./website/html:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 7d & wait $${!}; done;'"
    <<: *logging

  logger:
    container_name: logger
    hostname: logger
    image: logger
    ports: ['127.0.0.1:514:514']
    volumes:
      - ./.tmp/logs:/var/log/syslog-ng
